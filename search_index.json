[{"path":"Introduction.md","content":"## Platform Introduction\n\n&nbsp;&nbsp;AppInChina's payment platform provides a quick and convenient way to implement Wechat-Pay and Alipay in your app.\n\n&nbsp;&nbsp; Development is simple and short with the following four steps.\n\n1.  Request a new app configuration from the technical support engineer.\n    \n2.  Develop your app with Wechat/Alipay SDK.\n    \n3.  Develop your app with our payments API.\n    \n4.  Test and release your app with Wechat/Alipay payments.","title":"Introduction"},{"path":"AppConfiguration.md","content":"&nbsp;&nbsp;To get started with payments integration, please contact and provide the following information to the technical support engineer\n\n*   App name\n    \n*   App package\n    \n*   App signature (the signature of release apk, you can get it from [here](https://open.weixin.qq.com/zh_CN/htmledition/res/dev/download/sdk/Gen_Signature_Android.apk))\n    \n&nbsp;&nbsp;Our support engineer will then provide you with two key strings which are the API credentials: \n\nAPP\\_ID:\n\nAPP\\_SECRET:\n","title":"App Configuration"},{"path":"SDKInstallation.md","content":"[Android SDK](AndroidSdk.md)\n[iOS SDK](iOSSdk.md)\n","title":"SDK Installation"},{"path":"AndroidSdk.md","content":"# 1. Install Android SDK For Wechat Pay\n### 1.1 Config gradle :\n\n~~~\ndependencies {\n    compile 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:+'\n}\n~~~\n\n### 1.2 Android Java:\n\n~~~\nclass MyPayActivity {\n    private IWXAPI api;\n    \n    private initWechatPay(String appId) {\n        api = WXAPIFactory.createWXAPI(getApplicationContext(), appId);\n    }\n}\n~~~\n\n*****\n\n# 2. Install Android SDK For Alipay\n\n### 2.1. Get the `Alipay SDK`  from [ here](https://docs.open.alipay.com/54/104509)\n\n### 2.2. Add Alipay SDK to your project ` libs ` directory\n\n### 2.3. Config your project  `build.gradle`\n~~~\nallprojects {\n\n    repositories {\n        flatDir {\n            dirs 'libs'\n        }\n\n        google()\n        jcenter()\n\n    }\n}\n~~~\n\n### 2.4. Config your app module `build.gradle`\n\n**Notice:** The sdk name varies depending on the version.\n~~~\ndependencies {\n\n        compile (name: 'alipaySdk-15.6.0-20190226104053', ext: 'aar')\n\n}\n\n~~~\n### 2.5. Application for Runtime Permissions in `AndroidManifest.xml`\n~~~\n        android.permission.INTERNET\n        android.permission.ACCESS_NETWORK_STATE\n        android.permission.ACCESS_WIFI_STATE\n        android.permission.READ_PHONE_STATE\n        android.permission.WRITE_EXTERNAL_STORAGE\n~~~\n\nIf your  `targetsdk` version is above  `23 ` ,  you need to apply to the user for the following permissions at runtime\n\n~~~\n    WRITE_EXTERNAL_STORAGE\n    READ_PHONE_STATE\n~~~\n\n\n# 3. What you need to develop with our API is to\n\n1.  Query your app paychannels using ([PayTools.json API](https://www.kancloud.cn/mandou/appinchinapay/965247))\n2.  Init each paychannel with the result in step 1\n3.  Show the paychannel in the cashier page\n4.  Create pay order for the channel using ([CreateOrder.json API](https://www.kancloud.cn/mandou/appinchinapay/961682))\n5.  Invoke the pay api\n6.  Query the pay result and show the result page ([QueryOrder.json API](https://www.kancloud.cn/mandou/appinchinapay/961683))\n","title":"Android SDK"},{"path":"iOSSdk.md","content":"# 1. Install iOS SDK fro Wechat Pay\n\n\n****\n\n# 2. Install iOS SDK For Alipay\n\n## 2.1. Add `alipay SDK` to your project by `CocoaPods`\n~~~\n    pod  'AlipaySDK-iOS'\n~~~\n\n## 2.2. Add header file references to files that need to call the Alipay SDK.\n~~~\n    import  <AlipaySDK/AlipaySDK.h>\n~~~\n\n## 2.3.  Config your ` appScheme`\n\n at `XCode` control panel ，find `Info` tab   —>  `URL Types` tab  ——>  ` + ` ，\nthen at  ` URL Schemes ` input your appScheme , such as  `alisdkdemo`。\n\n## 2.4 Official Demo \nGet official demo from [**HERE** ](https://docs.open.alipay.com/54/104509)\n\n\n\n# 3. What you need to develop with our API is to\n\n1.  Query your app paychannels using ([PayTools.json API](https://www.kancloud.cn/mandou/appinchinapay/965247))\n\n2.  Init each paychannel with the result in step 1\n3.  Show the paychannel in the cashier page\n4.  Create pay order for the channel using ([CreateOrder.json API](https://www.kancloud.cn/mandou/appinchinapay/961682))\n\n5.  Invoke the pay api\n6.  Query the pay result and show the result page ([QueryOrder.json API](https://www.kancloud.cn/mandou/appinchinapay/961683))","title":"iOS SDK"},{"path":"API.md","content":"[API Authentication](APIAuthentication.md)\n[Pay Channel Init](PayToolsInit.md)\n[Create Order](Order.md)\n[Query Order](QueryOrder.md)\n[Query Order List](QueryOrderList.md)\n","title":"API"},{"path":"APIAuthentication.md","content":"All API requests need have the two headers: APP\\_ID, APP\\_SECRET.\n\nAndroid Java Example:\n\n~~~\n    private static final String APP_ID = \"20190307001\";\n    private static final String APP_SECRET = \"123\";\n    private static final Headers headers;\n​\n    static {\n        headers = Headers.of(\"APP_ID\", APP_ID, \"APP_SECRET\", APP_SECRET);\n    }\n~~~\n\nBASE_URL: https://api.appinchinaservices.com","title":"API Authentication"},{"path":"PayToolsInit.md","content":"Tips: You can use the [POSTMAN](https://www.getpostman.com/) to test API\n~~~[api]\nget:/payTools.json\n<<<\nsuccess\n{\n    \"msg\": \"success\",\n    \"code\": 0,\n    \"data\": [\n        {\n            \"accountId\": \"\",\n            \"appEnv\": \"\", // DEV or PROD\n            \"appName\": \"\",\n            \"appPackageName\": \"\",\n            \"appSignature\": \"\",\n            \"extInfo\": {},\n            \"gmtCreate\": 1551099989000,\n            \"gmtModified\": 1551099989000,\n            \"id\": \"\",\n            \"payChannel\": \"\", // WECHAT or ALIPAY\n            \"signStatus\": \"\" // OK or NO\n        }\n    ]\n}\n<<<\nerror\n{\n    code: \"error code\",\n    msg: \"error message\"\n}\n\n~~~","title":"Pay Channel Init"},{"path":"Order.md","content":"Tips: You can use the [POSTMAN](https://www.getpostman.com/) to test API\n~~~[api]\npost:/order.json\n*long:amount#（In cents. i.e 100= 1RMB, 1000=10RMB）\n*bizNo#（APP transaction number produced and kept by client for record keeping.）\n*goodsTitle#（APP order title. This will be displayed during payment. i.e \"Premium subscription 3 months\"）\n*payChannel#（target pay channel, i.e. WECHAT or ALIPAY）\ncustomerIdentity#（recommend fill, refer to purchase restore section/ sms code section）\nattachData#（optional field for extra data you may need to attach）\nsourceFrom#（optional field to attach app store names in the event you choose to track payments from each different store. This requires additional code in your app as well as different apks for each store）\n<<<\nsuccess（Wechat）\n{\n    \"msg\": \"success\",\n    \"code\": 0,\n    \"data\": {\n        \"appid\": \"\",\n        \"noncestr\": \"\",\n        \"package\": \"Sign=WXPay\",\n        \"partnerid\": \"\",\n        \"prepayid\": \"\",\n        \"sign\": \"\",\n        \"timestamp\": 1551708575\n    }\n}\n<<<\nsuccess（Alipay）\n{\n    \"msg\": \"success\",\n    \"code\": 0,\n    \"data\": {\n\n    }\n}\n<<<\nerror\n{\n    code: \"error code\",\n    msg: \"error message\"\n}\n\n~~~\n\nList of app store names and input format for sourceFrom field\nTencent MyApp: tencent\n\nHuawei App Market: huawei\n\nOppo Software Store: oppo\n\n360 Mobile Assistant: 360\n\nBaidu Mobile Assistant/91 Assistant/ Himarket: baidu\n\nMIUI App Store: miui\n\nVIVO App Store: vivo\n\nPP Assistant/Wandoujia/Taobao: pp\n\nChina Mobile MM Store: chinamm\n\nAnzhi Market: anzhi\n\nSogou Mobile Assistant: sogou\n\nMeizu Flyme: meizu\n\nCoolpad: coolpad\n\nLenovo Store: lenovo\n\nSamsung App Store: samsung\n\nAppChina: appchina\n\nOthers: others","title":"Create Order"},{"path":"QueryOrder.md","content":"Tips: You can use the [POSTMAN](https://www.getpostman.com/) to test API\n~~~[api]\npost:/detail.json\n*bizNo#（APP order no）\ncustomerIdentity#（recommend fill）\n<<<\nsuccess\n{\n    \"msg\": \"success\",\n    \"code\": 0,\n    \"data\": {\n        \"amount\": 1,\n        \"appId\": \"\",\n        \"bizNo\": \"\",\n        \"extInfo\": {},\n        \"gmtCreate\": 1551676154000,\n        \"gmtModified\": 1551676154000,\n        \"pmtDt\":1551676154000,\n        \"attachData\": {},\n        \"sourceFrom\": \"\",\n        \"goodsTitle\": \"\",\n        \"id\": \"\",\n        \"payChannel\": \"\",\n        \"paymentStatus\": \"\" // PAID means that user has paid successfully\n    }\n}\n<<<\nerror\n{\n    code: \"error code\",\n    msg: \"error message\"\n}\n\n~~~","title":"Query Order"},{"path":"QueryOrderList.md","content":"Tips: You can use the [POSTMAN](https://www.getpostman.com/) to test API\n~~~[api]\npost:/detail.json\n*customerIdentity#（customer identifier）\npaymentStatus#（PAID / PENDING / CLOSE ...）\npageNum#（page number, default to 1）\npageSize#（page size, default to 20）\n<<<\nsuccess\n{\n    \"msg\": \"success\",\n    \"code\": 0,\n    \"data\": {\n        \"payOrderList\": [{\n            \"amount\": 1,\n            \"appId\": \"\",\n            \"bizNo\": \"\",\n            \"extInfo\": {},\n            \"gmtCreate\": 1551676154000,\n            \"gmtModified\": 1551676154000,\n            \"pmtDt\":1551676154000,\n            \"attachData\": {},\n            \"sourceFrom\": \"\",\n            \"goodsTitle\": \"\",\n            \"id\": \"\",\n            \"payChannel\": \"\",\n            \"paymentStatus\": \"\" // PAID means that user has paid successfully\n        }],\n        totalCount: 1\n    }\n}\n<<<\nerror\n{\n    code: \"error code\",\n    msg: \"error message\"\n}\n\n~~~","title":"Query Order List"},{"path":"InitiatePayment.md","content":"[How to Fire a Pay](HowtoFireaPay.md)\n[Android](Android.md)\n[iOS](iOS.md)\n","title":"Initiate Payment"},{"path":"HowtoFireaPay.md","content":"![](https://i.loli.net/2019/03/08/5c8269e36bf4e.jpg)\n\nYour main logic should always be the following:\n1、Customer navigates around in your app, adds a good into the shopping cart.\n2、When the customer wants to pay for the good, a payment page appears which display a goods list and the total amount.\n3、Here, you should call our PayChannelInit API to get the pay channels that you have signed. Based on the result, do something to initialize the pay channel environment and then display the buttons for each pay channel.\n4、When the customer clicks a button, the app should call our CreateOrder API to get all information the pay channel requires.\n5、Build the pay request according to the data from Step 4，call the method in payment sdk to transfer customer to Alipay/Wechat APP.\n6、The customer pays the amount and is transfered back to your app.\n7、Lead the customer to the results page, and call our QueryOrder API for the pay result, then display it to customer.\n8、All funds charged and will be transferred to you later.","title":"How to Fire a Pay"},{"path":"Android.md","content":"# 1. Android for wechat \n\n### 1.1 Android Java:\n\n~~~\nJSONObject data = (JSONObject) bundle.getSerializable(\"data\");\n// {appid=wx7f229e38a04f2bec, noncestr=LXyHXBUVh39LYBrK, package=Sign=WXPay, partnerid=1523808161, prepayid=wx2613502950188989bf5937ec1163319167, sign=50F044924686609080E94B7C6EB7969E, timestamp=1551160229}\nPayReq req = new PayReq();\nreq.appId = data.getString(\"appid\");\nreq.partnerId = data.getString(\"partnerid\");\nreq.prepayId = data.getString(\"prepayid\");\nreq.nonceStr = data.getString(\"noncestr\");\nreq.timeStamp = data.getString(\"timestamp\");\nreq.packageValue = data.getString(\"package\");\nreq.sign = data.getString(\"sign\");\n​\nLog.d(TAG, req.checkArgs() + \" param check result\");\nboolean v = api.sendReq(req);\nLog.d(TAG, v + \" startup pay result\");\n~~~\n\n\n\n*****\n# 2.Android for Alipay\n\n### 2.1 Init Alipay parameter\n~~~          \n// app id\nprivate final String APP_ID = \"20190307001\";\n       \n~~~\n\n ### 2.2 Init the Api parameter \n\n~~~\n\n// pay channel API\nprivate final  String  BASE_URL =  \"http://cashier.51mandou.com\";\nprivate final String GET_PAY_TOOLS = BASE_URL + \"/payTools.json\" ;\n\n// createOrder API\npublic  final  String  CREATE_ORDER  =  BASE_URL+\"/order.json\";\n\n // order amount \nString amountStr = \"99\";\r\n\n// your business No.\nString bizNoStr = \"biz No\" ;\r\n\n// your goods title\nString titleStr = \" test goods title\";\n\n// your app_id and secret\nprivate final String APP_SECRET = \"123\";\n   \n// build request heads\nprivate Headers headers = Headers.of(\"APP_ID\", APP_ID, \"APP_SECRET\", APP_SECRET)\n~~~\n\n### 2.3  invoke  [pay channel](https://www.kancloud.cn/mandou/appinchinapay/965247)  API  to get the pay channel\n~~~\n\n// the Request object is from okhttp3  jar\nRequest request = new Request.Builder()\r\n                .url(Api.buildUrl(GET_PAY_TOOLS))\r\n                .headers(headers)\r\n                .build();\n\nCall call   =  new  OkHttpClient().newCall(request);;\n\n// call response\ncall.enqueue(new Callback() {\n    \n       // if response failure \n     @Override\r\n     public void onFailure(Call call, IOException e) {\r\n            Looper.prepare();\r\n            Toast.makeText(MainActivity.this, \"request failed\",         Toast.LENGTH_LONG).show();\r\n            Looper.loop();\r\n     }\n    \n    // if request success\n    @Override\r\n    public void onResponse(Call call, Response response) throws IOException {\r\n            String s = response.body().string();\r\n            Log.d(TAG, \"onResponse: \" + s);\r\n\r\n            JSONObject result = JSON.parseObject(s);\r\n\r\n            String code = result.getString(\"code\");\r\n\r            // if the response is successful ,the code = \"0\"\n            // for more detailed response information ,view the \n            // payTools.json API  \n            // https://www.kancloud.cn/mandou/appinchinapay/965247\n            if (\"0\".equals(code)) {\r\n\n                // get the payTools.json api response data\n                // to init you app pay view\n                // the doInitPayTools() method detail is on the next step\n                doInitPayTools(result.getJSONArray(\"data\"));\r\n\n            } else {\r\n\n                Looper.prepare();\r\n                Toast.makeText（getApplication(), result.getString(\"msg\"), Toast.LENGTH_LONG).show();\r\n                Looper.loop();\r\n\n            }\r\n        }\r\n    });\n\n~~~\n### 2.4 Get  `pay channel` api result , and init app view\n~~~\n// payToolList is payTools.json api result\nprivate void doInitPayTools(JSONArray payToolList) {\r\n\n        if (payToolList == null || payToolList.size() == 0) {\r\n            Toast.makeText(MainActivity.this, \"your app has not regested\", Toast.LENGTH_LONG).show();\r\n            return;\r\n        }\r\n\r\n        for (int i = 0; i < payToolList.size(); i++) {\r\n\n            JSONObject payTool = payToolList.getJSONObject(i);\r\n            String appId = payTool.getString(\"id\");\r\n\n            // get pay channel\n            String payChannel = payTool.getString(\"payChannel\");\r\n\r\n            Message msg = new Message();\r\n            Bundle bundle = new Bundle();\r\n            bundle.putString(\"appId\", appId);\r\n            msg.setData(bundle);\r\n\r\n            if (\"WECHAT\".equalsIgnoreCase(payChannel)) {\r\n                msg.what = MSG_SHOW_WECHAT;\r\n            } else if (\"ALIPAY\".equalsIgnoreCase(payChannel)) {\r\n                msg.what = MSG_SHOW_ALIPAY;\r\n            }\r\n\r\n            handler.sendMessage(msg);\r\n        }\r\n    }\n~~~\n\n**Handle process message**\n~~~\n\nprivate Handler handler = new Handler() {\r\n\r\n        @Override\r\n        public void handleMessage(Message msg) {\r\n            String appId = msg.getData().getString(\"appId\");\r\n\r\n            switch (msg.what) {\r\n                    case MSG_SHOW_ALIPAY:\r\n                        //TODO:  to do your business  or init view\n                        \n                        // request apliPay, the method is at next step\n                        sendPayRequest(\"ALIPAY\");\n                        break;\r\n                    default:\n                        break;\n            }\r\n        }\r\n    };\n~~~\n\n### 2.5 Request Create Order Api \n~~~\nprivate  void  sendPayRequest(final  String  payChannel) {\n\n    // build the request parameter\n    Map<String, Object> params = new HashMap<>();\r\n        params.put(\"amount\", new BigDecimal(amountStr).multiply(new BigDecimal(100)).longValue());\r\n        params.put(\"bizNo\", bizNoStr);\r\n        params.put(\"goodsTitle\", titleStr);\r\n        params.put(\"payChannel\", payChannel);\n\n    // build the request object\n        Request request = new Request.Builder()\r\n                .url(CREATE_ORDER)\n                 .post(RequestBody.create(MediaType.parse(\"application/json;charset=UTF-8\"), JSONObject.toJSONString(params)))\r\n                .headers(headers)\r\n                .build();\n}\n\n// callback process\nCall call =  new OkHttp().newCall(request);\ncall.enqueue(new Callback() {\r\n            // request failed callback \n            @Override\r\n            public void onFailure(Call call, IOException e) {\r\n                Looper.prepare();\r\n                Toast.makeText(MainActivity.this, \"request failed\", Toast.LENGTH_LONG).show();\r\n                Looper.loop();\r\n            }\n\n            // success response\n            @Override\r\n            public void onResponse(Call call, Response response) throws IOException {\r\n\n                // get  response data\n                String s = response.body().string();\r\n\r                Log.d(TAG, \"onResponse: \" + s);\r\n\n                JSONObject result = JSON.parseObject(s);\r\n                String code = result.getString(\"code\");\r\n\r                \n                // if request is successful , code = \"0\"\n                if (\"0\".equals(code)) {\r\n                    JSONObject data = result.getJSONObject(\"data\");\r\n                    data.put(\"payChannel\", payChannel);\r\n\r\n                    Message msg = new Message();\r\n                    Bundle bundle = new Bundle();\r\n                    bundle.putSerializable(\"data\", data);\r\n                    \n                    // handler process your business\n                    msg.setData(bundle);\r\n                    msg.what = MSG_CREATE_ORDER_RESP;\r\n                    handler.sendMessage(msg);\r\n\n                } else {\r\n                    Looper.prepare();\r\n                    Toast.makeText(MainActivity.this, result.getString(\"msg\"), Toast.LENGTH_LONG).show();\r\n                    Looper.loop();\r\n                }\r\n            }\r\n        });\r\n    }\n\n~~~\n**handle process**\n~~~\nprivate Handler handler = new Handler() {\r\n\r\n        @Override\r\n        public void handleMessage(Message msg) {\r\n           \r\n            switch (msg.what) {\r\n                case MSG_CREATE_ORDER_RESP:\r\n\n                    // to call alipay\n                   JSONObject data = (JSONObject) bundle.getSerializable(\"data\");\n\n                    // the callAlipay(data) method is at next step\n                    callAlipay(data);\n                    break;\r\n             \n            }\r\n        }\r\n    };\n\n~~~\n### 2.6 Call Alipay\n~~~\nprivate void callAlipay(JSONObject data) {\r\n        String sign = data.getString(\"sign\");\r\n\n        // remove useless key-value parameter\n        data.remove(\"sign\");\r\n        data.remove(\"payChannel\");\r\n        \n        // build request aplipay orderinfo paramter\n        StringBuffer sb = new StringBuffer();\r\n        for(String k: data.keySet()) {\r\n            sb.append(k);\r\n            sb.append('=');\r\n            try {\r\n                sb.append(URLEncoder.encode(data.getString(k), \"utf-8\"));\r\n            } catch (UnsupportedEncodingException e) {\r\n                e.printStackTrace();\r\n            }\r\n            sb.append('&');\r\n        }\r\n\r\n        try {\r\n            sb.append(\"sign=\").append(URLEncoder.encode(sign, \"utf-8\"));\r\n        } catch (UnsupportedEncodingException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        final String orderInfo = sb.toString();\r\n\r\n        Log.d(TAG, orderInfo);\r\n\r        \n        // request aplipay at new thread\n        new Thread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n\n                // Request Alipay \n                PayTask alipay = new PayTask(MainActivity.this);\r\n                Map<String, String> result = alipay.payV2(orderInfo, true);\r\n\r                \n                // TODO :\n                // if you want to show pay result page ,you can use Handle to process\n\n               // Message msg = new Message();\r\n                //msg.what = \"pay_success\";\r\n                //msg.obj = result;\r\n                //handler.sendMessage(msg);\r\n\n            }\r\n        }).start();\r\n    }\r\n\n~~~\n\n*****\n# 3.Full Demo\n### 3.1 Full demo url\n\n [https://github.com/yangfjiahl/Voucher.git](https://github.com/yangfjiahl/Voucher.git)","title":"Android"},{"path":"iOS.md","content":":-: **iOS**\n\n# 1.iOS for Wechat\nTODO:\n\n*****\n# 2. iOS for Alipay\n\n\n\n### 2.1. init Alipay parameter\r\n\n~~~ \nNSString *appID = @\" 129999000000\";\n\n~~~\n\n### 2.2. init api parameter\r\n~~~\n\n// order amount\nNSNumber *amountStr  =[NSNumber numberWithFloat:99.01] ;\n\n// your business NO.\nNSString  *bizNoStr = @\"biz20190001\" ;\n\n// your goods title\nNSString *titleStr = @\"test goods title \";\n\n// pay channel API\nstatic NSString  *BASE_URL =  \"http://cashier.51mandou.com\";\nstatic NSString *GET_PAY_TOOLS = BASE_URL + \"/payTools.json\" ;\n\n// create Order API\nstatic NSString  *CREATE_ORDER  =  BASE_URL+\"/order.json\";\n\n// your app_id \nfinal NSString APP_ID = \"20190307001\";\n\n//  Api secret\nfinal NSString APP_SECRET = \"123\";\n\n~~~\n\r\n### 2.3. Get the pay channel by `Pay Channel` Api\r\n\nImport AFHTTPS package at file header\n\n~~~\n\nAFHTTPSessionManager *manger = [AFHTTPSessionManager manager];\nAFHTTPRequestSerializer *requestSerializer =  [AFJSONRequestSerializer serializer];\n\nNSDictionary *headerFieldValueDictionary = @{@\"version\":@\"1.0\"};\nif (headerFieldValueDictionary != nil) {\n    for (NSString *httpHeaderField in headerFieldValueDictionary.allKeys) {\n        NSString *value = headerFieldValueDictionary[httpHeaderField];\n        [requestSerializer setValue:value forHTTPHeaderField:httpHeaderField];\n    }\n}\nmanger.requestSerializer = requestSerializer;\n[manger GET:@\"url\" parameters:nil  progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {\n       \n   } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {\n       \n}];\n~~~\n\n\r\nrequest the api\r\n\r\nget the response\r\n\r\n### 2.4. Create your order by `Create Order` Api\r\n\r\nrequest the api\r\n\r\nget the response\r\n\r\n### 2.5 . Request Alipay to pay your order\r\n\r\n### 2.6. Query your order list\n\n\n2.1 iOS Object-c for alipay\n\n\n\n~~~\n//\n// 选中商品调用支付宝极简支付\n//\n- (void)doAPPay\n{\n    // 重要说明\n    // 这里只是为了方便直接向商户展示支付宝的整个支付流程；所以Demo中加签过程直接放在客户端完成；\n    // 真实App里，privateKey等数据严禁放在客户端，加签过程务必要放在服务端完成；\n    // 防止商户私密数据泄露，造成不必要的资金损失，及面临各种安全风险；\n    /*============================================================================*/\n    /*=======================需要填写商户app申请的===================================*/\n    /*============================================================================*/\n    NSString *appID = @\"\";\n    \n    // 如下私钥，rsa2PrivateKey 或者 rsaPrivateKey 只需要填入一个\n    // 如果商户两个都设置了，优先使用 rsa2PrivateKey\n    // rsa2PrivateKey 可以保证商户交易在更加安全的环境下进行，建议使用 rsa2PrivateKey\n    // 获取 rsa2PrivateKey，建议使用支付宝提供的公私钥生成工具生成，\n    // 工具地址：https://doc.open.alipay.com/docs/doc.htm?treeId=291&articleId=106097&docType=1\n\n    NSString *rsa2PrivateKey = @\"\";\n    NSString *rsaPrivateKey = @\"\";\n\n    /*============================================================================*/\n    /*============================================================================*/\n    /*============================================================================*/\n    \n    //partner和seller获取失败,提示\n\n    if ([appID length] == 0 ||\n        ([rsa2PrivateKey length] == 0 && [rsaPrivateKey length] == 0))\n    {\n        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"提示\"\n                                                                       message:@\"缺少appId或者私钥,请检查参数设置\"\n                                                                preferredStyle:UIAlertControllerStyleAlert];\n        UIAlertAction *action = [UIAlertAction actionWithTitle:@\"知道了\"\n                                                         style:UIAlertActionStyleDefault\n                                                       handler:^(UIAlertAction *action){\n                                                           \n                                                       }];\n        [alert addAction:action];\n        [self presentViewController:alert animated:YES completion:^{ }];\n        return;\n    }\n    \n    /*\n     *生成订单信息及签名\n     */\n    //将商品信息赋予AlixPayOrder的成员变量\n    APOrderInfo* order = [APOrderInfo new];\n    \n    // NOTE: app_id设置\n    order.app_id = appID;\n    \n    // NOTE: 支付接口名称\n    order.method = @\"alipay.trade.app.pay\";\n    \n    // NOTE: 参数编码格式\n    order.charset = @\"utf-8\";\n    \n    // NOTE: 当前时间点\n    NSDateFormatter* formatter = [NSDateFormatter new];\n    [formatter setDateFormat:@\"yyyy-MM-dd HH:mm:ss\"];\n    order.timestamp = [formatter stringFromDate:[NSDate date]];\n    \n    // NOTE: 支付版本\n    order.version = @\"1.0\";\n    \n    // NOTE: sign_type 根据商户设置的私钥来决定\n    order.sign_type = (rsa2PrivateKey.length > 1)?@\"RSA2\":@\"RSA\";\n    \n    // NOTE: 商品数据\n    order.biz_content = [APBizContent new];\n    order.biz_content.body = @\"我是测试数据\";\n    order.biz_content.subject = @\"1\";\n    order.biz_content.out_trade_no = [self generateTradeNO]; //订单ID（由商家自行制定）\n    order.biz_content.timeout_express = @\"30m\"; //超时时间设置\n    order.biz_content.total_amount = [NSString stringWithFormat:@\"%.2f\", 0.01]; //商品价格\n    \n    //将商品信息拼接成字符串\n    NSString *orderInfo = [order orderInfoEncoded:NO];\n    NSString *orderInfoEncoded = [order orderInfoEncoded:YES];\n    NSLog(@\"orderSpec = %@\",orderInfo);\n    \n    // NOTE: 获取私钥并将商户信息签名，外部商户的加签过程请务必放在服务端，防止公私钥数据泄露；\n    //       需要遵循RSA签名规范，并将签名字符串base64编码和UrlEncode\n    NSString *signedString = nil;\n    APRSASigner* signer = [[APRSASigner alloc] initWithPrivateKey:((rsa2PrivateKey.length > 1)?rsa2PrivateKey:rsaPrivateKey)];\n\n    if ((rsa2PrivateKey.length > 1)) {\n        signedString = [signer signString:orderInfo withRSA2:YES];\n    } else {\n        signedString = [signer signString:orderInfo withRSA2:NO];\n    }\n    \n    // NOTE: 如果加签成功，则继续执行支付\n    if (signedString != nil) {\n        //应用注册scheme,在AliSDKDemo-Info.plist定义URL types\n        NSString *appScheme = @\"alisdkdemo\";\n        \n        // NOTE: 将签名成功字符串格式化为订单字符串,请严格按照该格式\n        NSString *orderString = [NSString stringWithFormat:@\"%@&sign=%@\",\n                                 orderInfoEncoded, signedString];\n        \n        // NOTE: 调用支付结果开始支付\n        [[AlipaySDK defaultService] payOrder:orderString fromScheme:appScheme callback:^(NSDictionary *resultDic) {\n            NSLog(@\"reslut = %@\",resultDic);\n            // TODO: 业务逻辑\n    \n        }];\n    }\n}\n\n~~~","title":"iOS"},{"path":"PurchaseRestore.md","content":"[Basic Principles](BasicPrinciples.md)\n[Authentication](Authentication.md)\n[Sms Code](SmsCode.md)\n[Logon Status Check](LogonStatusCheck.md)\n[Typical Scenarios](TypicalScenarios.md)\n","title":"Purchase Restore"},{"path":"BasicPrinciples.md","content":"&nbsp;&nbsp;Almost every app requires a purchase restore option for its customers. If a customer transfers to different device, they will still have their purchase status saved.\n\n&nbsp;&nbsp;Based on this, we need to supply a method to identify a single customer across different devices. After a customer has been authenticated, he should be able to find all paid orders and restore it to a new device.\n\n&nbsp;&nbsp;Our platform provides a SMS login authentication solution. Each time a customer logs on to a new device, an authcode message will be acquired and evaluated. Additionally, in order to prevent customers from logging onto too many devices, we have set a maximum threshold N. Once the customer tries to logon to N+1 devices, the first device will be forced to automatically logout.\n\n\n&nbsp;&nbsp;Your main logic should look like the following:\n![](https://i.loli.net/2019/03/30/5c9edbd019604.png)","title":"Basic Principles"},{"path":"Authentication.md","content":"Tips: You can use the [POSTMAN](https://www.getpostman.com/) to test API\n~~~[api]\npost:/auth.json\n*mobileNo#\n*authCode#（get from SMS Code API）\n<<<\nsuccess\n{\n    \"msg\": \"success\",\n    \"code\": 0,\n    \"data\": {\n        \"customerId\": \"\",\n        \"token\": \"\"\n    }\n}\n<<<\nerror\n{\n    code: \"error code\",\n    msg: \"error message\"\n}\n\n~~~","title":"Authentication"},{"path":"SmsCode.md","content":"Tips: You can use the [POSTMAN](https://www.getpostman.com/) to test API\n~~~[api]\nget:/sms.json\n*mobileNo#(phone numbers)\n*APP_ID#（request by HEADER ）\n*APP_SECRET#(request by HEADER)\n<<<\nsuccess\n{\n\n\"msg\":\"success\",\n\"code\":0\"，\ndata\":\"ok\"\n\n}\n<<<\nerror\n{\n\"msg\":\"非法请求\",\n\"code\":1001}\n}\n\n~~~\n\n## **example**\n![](https://i.loli.net/2019/03/31/5ca08e8a0f752.png)\n\n","title":"Sms Code"},{"path":"LogonStatusCheck.md","content":"Tips: You can use the [POSTMAN](https://www.getpostman.com/) to test API\n~~~[api]\nget:/checkAuth.json\n*token#\n<<<\nsuccess\n{\n    \"msg\": \"success\",\n    \"code\": 0,\n    \"data\": true/false（whether customer has been logout or not）\n}\n<<<\nerror\n{\n    code: \"error code\",\n    msg: \"error message\"\n}\n\n~~~","title":"Logon Status Check"},{"path":"TypicalScenarios.md","content":"## 1）An app that requires a customer pay only once for all features\n&nbsp;&nbsp;After authentication, you will get the customer's **customerId** and **token** from our backend. When the customer starts to pay, Create Order by the following param values:\n**bizNo**=CONCAT(*customerId*, *\"Default\"*)（or whatever fixed string you like）\n**customerIdentity**=*customerId*.\n&nbsp;&nbsp;When the customer has logged onto another device, Query Order by the above param values again, you will get to know whether the customer has paid or not.\n*****\n## 2）An app that requires a customer to pay several times for fixed levels of service such as VIP1、VIP2、VIP3、VIP2019、VIP2020\n&nbsp;&nbsp;After authentication, you will get the customer's **customerId** and **token** from our backend. When the customer starts to pay, Create Order by the following param values:\n**bizNo**=CONCAT(*customerId*, （one of）*VIP1、VIP2、VIP3、VIP2019、VIP2020*)\n**customerIdentity**=*customerId*.\n&nbsp;&nbsp;When the customer has logged onto another device, Query Order by the above param values again, you will get to know whether the customer has paid for a service or not.\n\n*****\n## 3）An app that requires a customer to pay for many separate products/orders\n&nbsp;&nbsp;In this condition, you probably have your own backend server, use your own Customer Management System and Order Management System.\n&nbsp;&nbsp;When the customer starts to pay, Create Order by the following param values:\n**bizNo**=your backend orderId\n**customerIdentity**=your backend customerId\n&nbsp;&nbsp;When the customer has logged onto another device, Query Order by the above param values again, you will get to know whether the customer has paid for an order or not.\n\n*****\n","title":"Typical Scenarios"},{"path":"Help.md","content":"[Video](Video.md)\n[Frequently Asked Questions](faq.md)\n[Update Notes](UpdateNotes.md)\n","title":"Help"},{"path":"Video.md","content":"","title":"Video"},{"path":"faq.md","content":"## **Frequently Asked Questions**\n\n**The demo code works for payments, but when I use my own APP\\_ID and APP\\_SECRET the Wechat pay and alipay buttons disappear**\nPlease make sure you are not just swapping your APP\\_ID and APP\\_SECRET with the demo code's information. Each set of APP\\_ID and SECRET is connected to a specific app. This information cannot be used interchangeably with other apps. Make sure you change the package name, and signature as well.\n\n&nbsp;\n**Alipay button works but the WeChat button will not work**\nThis is due to either the app signature or app package name (or both) not matching WeChat's information. Please contact your technical support engineer to update this information exactly as it appears in your apk. Alipay does not validate your app’s signature. If you Alipay works it does not necceesarily mean that WeChat pay work as well. \n\n&nbsp;\n**Why am I getting the 'signature does not match' error in WeChat pay even though the signatures are matching?**\nPlease clear the WeChat app data or reinstall WeChat and try again. WeChat stores this information in the app, so if you change this information during development the app itself will still remember the old information unless you clear app data or reinstall the app.\n\n&nbsp;\n**Is AppInChina's payment API a web API?**\nYes, you may use any language you are comfortable with to access the api. Examples in this documentation is in Java.\n\n&nbsp;\n**How long does auth token for the sms login system stay valid?**\nClients set the number of devices their customers can logon to at the same time. By default this number is 3 devices, this can be changed upon request. The auth token stays valid forever, unless the user reaches the device limit. When this happens the server automatically revokes the oldest token.\n&nbsp;\n**List of all error codes**\n\n/\\*\\*  \n \\* 未签约  \n \\*/  \n APP\\_NOT\\_SIGN(50003, \"APP未签约\"),  \n  \n /\\*\\*  \n \\* 无效的金额  \n \\*/  \n INVALID\\_AMOUNT(50004, \"无效的金额\"),  \n  \n /\\*\\*  \n \\* APP不存在  \n \\*/  \n APP\\_NOT\\_EXISTS(50005, \"APP不存在\"),  \n  \n /\\*\\*  \n \\* 订单支付状态异常  \n \\*/  \n ORDER\\_STATUS\\_ERROR(50006, \"订单支付状态异常\"),  \n  \n /\\*\\*  \n \\* 订单号已存在且金额不相同  \n \\*/  \n ORDER\\_EXISTS\\_BUT\\_AMOUNT\\_DIFF(50007, \"订单号已存在且金额不相同\"),  \n  \n /\\*\\*  \n \\* 订单已支付  \n \\*/  \n ORDER\\_PAID(50008, \"订单已支付\"),  \n  \n /\\*\\*  \n \\* APP秘钥错误  \n \\*/  \n APP\\_SECRET\\_ERROR(50009, \"APP秘钥错误\"),;\n","title":"Frequently Asked Questions"},{"path":"UpdateNotes.md","content":"**June 10th, 2019**\n1) Added **sourceFrom** field in Create Order. Clients can use this optional field to send information to the server to differentiate between different Chinese Android stores. This allows revenue tracking between different stores. This requires a separate apk for each store. \n2) Added an FAQ section to the payments api documentation. ","title":"Update Notes"}]